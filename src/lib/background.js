// Generated by CoffeeScript 1.3.3
var BG, dateToTimeStr, eventTimer, events, getEvent, getEvents, getHost, getPendings, getPendingsUrl, getRootUrl, getSearchUrl, init, notified, notify, notifyEvent, pendings, rawEvents, serverTimer, setBadge, setBadgeColor, timeOffset, timeToDate,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

notify = function(data) {
  var noti;
  BG.n_message = data.message || "test";
  BG.n_link = data.link || localStorage.cybozuUrl;
  BG.n_time = data.time || "";
  BG.n_room = data.room || "";
  BG.n_memo = data.memo || "";
  BG.n_sec = data.sec || 0;
  noti = window.webkitNotifications.createHTMLNotification("notification.html");
  noti.show();
  if (n_sec > 0) {
    setTimeout((function() {
      return noti.cancel();
    }), n_sec * 1000);
  }
  return noti;
};

setBadge = function(text) {
  return chrome.browserAction.setBadgeText({
    text: text
  });
};

setBadgeColor = function(color) {
  return chrome.browserAction.setBadgeBackgroundColor({
    color: color
  });
};

init = function() {
  var eCheck, eventTimer, sCheck, serverTimer;
  if (localStorage["_init"] !== "_init") {
    return setTimeout(function() {
      return chrome.tabs.create({
        url: "./option.html"
      }, null);
    }, 1000);
  } else {
    clearInterval(serverTimer);
    clearInterval(eventTimer);
    sCheck = localStorage["serverCheckInterval"];
    eCheck = localStorage["eventCheckInterval"];
    getEvents();
    serverTimer = setInterval(getEvents, sCheck * 1000 * 60);
    return eventTimer = setInterval(notifyEvent, eCheck * 1000);
  }
};

timeToDate = function(ds) {
  var allDay, en, end, ms, st, start;
  ms = ds.match(/\d{2}:\d{2}/g);
  st = ms[0].match(/(\d{2}):(\d{2})/);
  en = void 0;
  start = void 0;
  end = void 0;
  allDay = false;
  if (ms.length === 2) {
    en = ms[1].match(/(\d{2}):(\d{2})/);
    if (ms[0] === "00:00" && ms[1] === "23:59") {
      allDay = true;
    }
  } else {
    en = st;
  }
  start = new Date(today.getYear() + 1900, today.getMonth(), today.getDate(), st[1] - 0, st[2] - 0).getTime();
  end = new Date(today.getYear() + 1900, today.getMonth(), today.getDate(), en[1] - 0, en[2] - 0).getTime();
  return {
    start: start,
    end: end,
    allDay: allDay
  };
};

getSearchUrl = function(query) {
  if (query == null) {
    query = '';
  }
  return getRootUrl() + ("/schedule/index?gid=search&search_text=" + query);
};

getPendingsUrl = function() {
  return getRootUrl() + "/notification/pending_list?";
};

getRootUrl = function() {
  var cybozuUrl;
  cybozuUrl = localStorage.cybozuUrl;
  return cybozuUrl.slice(0, cybozuUrl.indexOf("/portal/"));
};

getHost = function() {
  var cybozuUrl;
  cybozuUrl = localStorage.cybozuUrl;
  return cybozuUrl.split("/")[0] + "//" + cybozuUrl.split("/")[2];
};

getPendings = function(callback) {
  var id, idpass, pass;
  id = localStorage._account;
  pass = localStorage._password;
  idpass = "_account=" + id + "&_password=" + pass;
  $.ajaxSetup({
    cache: false
  });
  return $.get(getPendingsUrl() + idpass, function(html) {
    var i, link, message, tds, title, tr, trs, updated, userName;
    trs = $("#view_part tbody tr", $(html));
    BG.pendings = [];
    i = 2;
    while (i < trs.length) {
      tr = $(trs[i]);
      tds = $("td", tr);
      title = $(tds[1]).text();
      link = getHost() + $("a", tds[1]).attr("href");
      message = $(tds[2]).text();
      userName = $(tds[3]).text();
      updated = $(tds[4]).text();
      BG.pendings.push({
        title: title,
        link: link,
        message: message,
        userName: userName,
        updated: updated
      });
      i++;
    }
    if (BG.pendings.length > 0) {
      setBadge("" + BG.pendings.length);
    } else {
      setBadge("");
    }
    if (callback) {
      return callback();
    }
  });
};

getEvent = function(eventId) {
  var cybozuUrl, eventUrl, id, idpass, p_idx, pass;
  id = localStorage._account;
  pass = localStorage._password;
  cybozuUrl = localStorage.cybozuUrl;
  p_idx = cybozuUrl.indexOf("/portal/");
  eventUrl = cybozuUrl.slice(0, p_idx) + "/schedule/view?event=" + eventId + "&";
  idpass = "_account=" + id + "&_password=" + pass;
  return $.get(eventUrl + idpass, function(html) {
    var dates, mainarea, memo, name, room, tds, timeStr, trs, viewTable;
    mainarea = $("div.mainarea", html);
    viewTable = $("table.view_table", mainarea)[1];
    trs = $("tr", viewTable);
    tds = $("td", trs);
    timeStr = $(tds[0]).text();
    dates = timeToDate(timeStr);
    name = void 0;
    room = void 0;
    memo = void 0;
    if (timeStr.match(/\d{4}/)) {
      name = $(tds[1]).text();
      room = $($("span.voice", tds[2])).text();
      memo = $(tds[3]).text();
    } else {
      name = $(tds[2]).text();
      room = $($("span.voice", tds[3])).text();
      memo = $(tds[4]).text();
    }
    return BG.events.push({
      id: eventId,
      name: name,
      link: eventUrl,
      start: dates.start,
      end: dates.end,
      allDay: dates.allDay,
      room: room,
      memo: memo
    });
  });
};

getEvents = function(callback) {
  var cybozuUrl, id, loginUrl, pass;
  cybozuUrl = localStorage["cybozuUrl"];
  id = localStorage["_account"];
  pass = localStorage["_password"];
  if (!cybozuUrl || !id || !pass) {
    notify({
      message: "設定が不正です"
    });
    return;
  }
  loginUrl = cybozuUrl + "_account=" + id + "&_password=" + pass;
  BG.events = [];
  BG.rawEvents = [];
  $.ajaxSetup({
    cache: false
  });
  return $.get(loginUrl, function(html) {
    var elem, eventElem, eventLink, match, weektd, _i, _len;
    weektd = $("td.s_user_week.normalEvent", "<div>" + html + "</div>");
    if (weektd.length === 0) {
      if (callback) {
        return callback({
          message: "ログイン失敗。設定を見直して下さい",
          sec: 0
        });
      }
    } else {
      eventElem = $(".normalEventElement", weektd[0]);
      if (BG.today.getDate() !== new Date().getDate()) {
        console.log("new day!");
        BG.events = [];
        BG.rawEvents = [];
        BG.notified = [];
        BG.today = new Date();
      }
      for (_i = 0, _len = eventElem.length; _i < _len; _i++) {
        elem = eventElem[_i];
        eventLink = $("a", elem).attr("href");
        if (eventLink) {
          BG.rawEvents.push(elem);
          match = eventLink.match("event=([0-9]+)");
          if (match) {
            getEvent(match[1]);
          }
        }
      }
      return typeof callback === "function" ? callback({
        message: "ログイン成功!",
        sec: 3
      }) : void 0;
    }
  });
};

dateToTimeStr = function(d) {
  var h, m;
  m = d.getMinutes();
  h = d.getHours();
  if (m < 10) {
    m = "0" + m;
  }
  if (h < 10) {
    h = "0" + h;
  }
  return h + ":" + m;
};

notifyEvent = function() {
  var en, end, ev, msg, now, st, start, tgt, _i, _len, _ref, _results;
  getPendings();
  now = new Date().getTime();
  tgt = now + (localStorage.eventBefore - 0) * 1000 * 60;
  _results = [];
  for (_i = 0, _len = events.length; _i < _len; _i++) {
    ev = events[_i];
    st = ev.start;
    en = ev.end;
    if (!(_ref = ev.id, __indexOf.call(BG.notified, _ref) >= 0) && ((now < st && st < tgt))) {
      start = dateToTimeStr(new Date(st));
      end = dateToTimeStr(new Date(en));
      msg = {
        message: ev.name,
        link: ev.link,
        time: start + " - " + end,
        room: ev.room,
        memo: ev.memo,
        sec: localStorage.closeAfter
      };
      notify(msg);
      BG.notified.push(ev.id);
      break;
    } else {

    }
  }
  return _results;
};

events = [];

rawEvents = [];

notified = [];

pendings = [];

BG = this;

serverTimer = void 0;

eventTimer = void 0;

timeOffset = 0;

BG.today = new Date(2000, 1, new Date().getDate() - 1);

$.get('/manifest.json', function(data) {
  var mt;
  mt = data.match(/"version".*"(.*)"/);
  return BG.version = mt[1];
});
